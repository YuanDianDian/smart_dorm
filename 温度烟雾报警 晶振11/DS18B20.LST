C51 COMPILER V9.56.0.0   DS18B20                                                           04/18/2017 17:14:58 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE DS18B20
OBJECT MODULE PLACED IN DS18B20.OBJ
COMPILER INVOKED BY: D:\Program Files (x86)\MDK5\C51\BIN\C51.EXE DS18B20.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND T
                    -ABS(2)

line level    source

   1          #include "DS18B20.h"
   2          #include<intrins.h>
   3          
   4          //定义变量
   5          unsigned char flag_temper = 0;
   6          
   7          void Delay800us()   //@11.0592MHz
   8          {
   9   1        unsigned char i, j;
  10   1      
  11   1        _nop_();
  12   1        i = 9;
  13   1        j = 151;
  14   1        do
  15   1        {
  16   2          while (--j);
  17   2        } while (--i);
  18   1      }
  19          
  20          void Delay40us()    //@11.0592MHz
  21          {
  22   1        unsigned char i;
  23   1      
  24   1        _nop_();
  25   1        _nop_();
  26   1        i = 107;
  27   1        while (--i);
  28   1      }
  29          
  30          void Delay200us()   //@11.0592MHz
  31          {
  32   1        unsigned char i, j;
  33   1      
  34   1        _nop_();
  35   1        _nop_();
  36   1        i = 3;
  37   1        j = 34;
  38   1        do
  39   1        {
  40   2          while (--j);
  41   2        } while (--i);
  42   1      }
  43          
  44          
  45          
  46          //****************************************************
  47          //DS18B20延时函数
  48          //****************************************************
  49          void DS18B20_Delay( unsigned int n )
  50          {
  51   1        unsigned int i,j;
  52   1        for(j = 0 ; j < 12 ; j++ );
  53   1          for(i = 0 ; i < n ; i++ );
  54   1      }
C51 COMPILER V9.56.0.0   DS18B20                                                           04/18/2017 17:14:58 PAGE 2   

  55          //****************************************************
  56          //DS18B20写1字节
  57          //****************************************************
  58          void DS18B20_Write_Byte( unsigned char dat)
  59          {
  60   1        unsigned char i;
  61   1        for( i = 0 ; i < 8 ; i++ )
  62   1        {
  63   2          DS18B20_DQ = 0;
  64   2          _nop_();_nop_();_nop_();_nop_();_nop_();      //延时>1us
  65   2          _nop_();_nop_();_nop_();_nop_();_nop_();
  66   2          
  67   2          DS18B20_DQ = dat&0x01;    //先写低位
  68   2          dat >>= 1;
  69   2      
  70   2          DS18B20_Delay(6); //延时60~120us
  71   2          
  72   2          DS18B20_DQ = 1;   //释放总线
  73   2          _nop_();_nop_();_nop_();_nop_();_nop_();      //延时>1us
  74   2          _nop_();_nop_();_nop_();_nop_();_nop_();  
  75   2        }   
  76   1      }
  77          
  78          //****************************************************
  79          //DS18B20读1字节
  80          //****************************************************
  81          unsigned char DS18B20_Read_Byte( )
  82          {
  83   1        unsigned char dat,i;
  84   1        for( i = 0 ; i < 8 ; i++ )
  85   1        {
  86   2          DS18B20_DQ = 0;
  87   2          _nop_();_nop_();_nop_();_nop_();_nop_();      //延时>1us
  88   2          _nop_();_nop_();_nop_();_nop_();_nop_();
  89   2              
  90   2          DS18B20_DQ = 1;   //释放总线
  91   2          _nop_();_nop_();_nop_();_nop_();_nop_();      //延时>1us
  92   2          _nop_();_nop_();_nop_();_nop_();_nop_();
  93   2      
  94   2          dat >>= 1;
  95   2          if( DS18B20_DQ == 1)
  96   2          {
  97   3            dat |= 0X80;
  98   3          }
  99   2          else
 100   2          {
 101   3            dat &= 0x7f;
 102   3          }
 103   2      
 104   2          DS18B20_Delay(6); //延时60~120us      
 105   2        }
 106   1        return dat;   
 107   1      }
 108          
 109          //****************************************************
 110          //DS18B20初始化
 111          //****************************************************
 112          bit DS18B20_Init()
 113          {
 114   1        bit Flag_exist = 1;
 115   1        DS18B20_DQ = 1;     //释放总线
 116   1        _nop_();_nop_();_nop_();_nop_();_nop_();        //延时>1us
C51 COMPILER V9.56.0.0   DS18B20                                                           04/18/2017 17:14:58 PAGE 3   

 117   1        _nop_();_nop_();_nop_();_nop_();_nop_();
 118   1      
 119   1        DS18B20_DQ = 0; 
 120   1        Delay800us();   //延时480~960us 
 121   1      
 122   1        DS18B20_DQ = 1;     //释放总线
 123   1        Delay40us();    //延时15~60us
 124   1      
 125   1        Flag_exist = DS18B20_DQ;
 126   1        Delay200us();   //延时60~240us
 127   1      
 128   1        DS18B20_DQ = 1;     //释放总线
 129   1        return Flag_exist;      
 130   1      }
 131          
 132          //**********************************************************
 133          //读取温度函数，返回温度的绝对值，并标注flag_temper，flag_temper=1表示负，flag_temper=0表示正
 134          //**********************************************************
 135          unsigned int Get_temp(void)         //读取温度值 
 136          {  
 137   1        float tt;
 138   1        unsigned char a,b;
 139   1        unsigned int temp;
 140   1        if( DS18B20_Init() == 0 )                //初始化
 141   1        {
 142   2          DS18B20_Write_Byte(0xcc);          //忽略ROM指令
 143   2          DS18B20_Write_Byte(0x44);          //温度转换指令
 144   2        
 145   2        //  _delay_ms(750);       //PROTEUS仿真需要加
 146   2        
 147   2          if( DS18B20_Init() == 0 )                 //初始化
 148   2          {
 149   3            DS18B20_Write_Byte(0xcc);          //忽略ROM指令
 150   3            DS18B20_Write_Byte(0xbe);          //读暂存器指令
 151   3            a = DS18B20_Read_Byte();           //读取到的第一个字节为温度LSB
 152   3            b = DS18B20_Read_Byte();           //读取到的第一个字节为温度MSB
 153   3            temp = b;                      //先把高八位有效数据赋于temp
 154   3            temp <<= 8;                    //把以上8位数据从temp低八位移到高八位
 155   3            temp = temp|a;                //两字节合成一个整型变量
 156   3            
 157   3            if(temp>0xfff)
 158   3            {
 159   4              flag_temper=1;        //温度为负数
 160   4              temp=(~temp)+1;
 161   4            }
 162   3            else
 163   3            {                                        
 164   4              flag_temper=0;        //温度为正或者0
 165   4            }
 166   3            
 167   3            tt = temp*0.0625;              //得到真实十进制温度值
 168   3                                            //因为DS18B20可以精确到0.0625度
 169   3                                            //所以读回数据的最低位代表的是0.0625度
 170   3            temp = tt*10+0.5;               //放大十倍
 171   3                                            //这样做的目的将小数点后第一位也转换为可显示数字
 172   3                                              //同时进行一个四舍五入操作。
 173   3          }
 174   2        }
 175   1        return temp;
 176   1      }
 177          
 178          
C51 COMPILER V9.56.0.0   DS18B20                                                           04/18/2017 17:14:58 PAGE 4   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    357    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
